- O que é NodeJs?
  > Plataforma open-spurce que permite a execução de Javascript no lado do servidor
  > É composto de:
    + v8 - Interpretador de Javascript criado pela google e tem como responsabilidade pegar o código Javascript e mostrar de uma forma que o browser condiga interpretar
    + libuv - Biblioteca multiplataforma com foco em I/O (entrada/saída) assíncrono
    + conjunto de módulos

- Características do NodeJs
  > Arquitetura Event Loop (baseado em eventos)
    + Call Stack (pilha de funções que estão prontas para serem chamadas)
    + Funciona no sistema LIFO (Last In Firts Out)
  > Single - Thread (Escuta uma requisição por vez)
    + Escuta uma função da Call Stack e manda para uma Thread
    + Por padrão ele vai ter 4 Threads disponpiveis para serem executadas
  > Non-blocking I/O (pode executar funções sem que outras sejam finalizadas completamente)
  > Módulos próprios
    + http (Pde criar um servidor com esse módulo)
    + dns
    + fs (Para trabalhar com arquivos)
    + buffer
    + ...

- O que são gerenciadores de pacotes?
  > NPM e Yarn
  > Instalam bibliotecas externas
  > Disponibiliza bibliotecas
  > Vamos utilizar o Yarn, pois é um pouco mais rápido do que o NPM

- Frameworks
  > Express (é o que vamos utilizar no curso)
    + Robusto
    + Simples
    + Completo
  > Egg.js 
  > Nest.js
  > Adonis.js

- O que é API?
  > Application Programming Interface (Interface de Progrmação de Aplicativos)
  > Conjunto de requistos que determina como um aplicativo se comunicará com o outro
  > Documentação para desenvolver

- O que é REST
  > Representation State Transfer (Tranferência Representacional de Estado)
  > É um modelo de arquitetura
  > 6 Regras:
    + 1 - Client server (de um lado tem o client e do outro tem o server. o cliente não se preocupa com o server)
    + 2 - Stateless (O client pode realizar quantas requisições quiser para o servidor, mas o server não armazena estados ou seções dessas requisições)
    + 3 - Cache (A aplicação deve ser contruída de forma que o cache possa ser feito)
    + 4 - Interface uniforme
      . Identificação dos recursos (htt://enderecoservidor.com.br/products | htt://enderecoservidor.com.br/clients)
      . Representação dos recursos (JSon, XML, HTML)
      . Mensagens auto-descritivas
      . HATEOAS (Hypertext As The Engine Of Application State) : Significa que podemos retornar links dentro da requisição
    + 5 - Camadas (Devem existir camadas entre o client e os servers)
    + 6 - Código sob demanda (Permite que as funcionalidades do client seja estendidas na forma de scripts ou mini aplicativos) 
